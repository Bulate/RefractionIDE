#ifndef RESULTSDOCKWIDGET_H
#define RESULTSDOCKWIDGET_H

#include <QDockWidget>
#include <QListWidget>
#include <QTabWidget>
#include <QTextEdit>

#include <QFile>

class CompiledProgram;
class Diagnostic;
class Compiler;
class StandardInputOutputInspector;


class ResultsDockWidget : public QDockWidget
{
    Q_OBJECT
    Q_DISABLE_COPY(ResultsDockWidget)
public:
    explicit ResultsDockWidget(QWidget* parent = nullptr, Qt::WindowFlags flags = 0);

	void createTestCasesTabs(int testCasesCount, const QList<QFile *> &testCaseInputs, const QList<QFile *> &testCaseOutputs);

protected:
  /// Manages the tabs for output generated by build and debug tools
  QTabWidget* resultsTabWidget;
  QTextEdit* compilerOutputTab;
  /// A control to display compiler, linker and debugger output
  QListWidget* toolsOutput;
  /// Let user compare differences between test case's input/output/error and his/her solution
  StandardInputOutputInspector* standardInputOutputInspector = nullptr;
  /// Compiler object that generated the diagnostics shown in the tools output list
  Compiler* compiler;



public slots:
  /// Appends a message sent by the debugger (e.g. GDB)
  void appendDebuggerMessage(QtMsgType type, const QString& category, const QString& message);
//  /// Let user compare differences between test case's input/output/error and his/her solution
//  StandardInputOutpInspector* standardInputOutputInspector = nullptr;

  /// Called when a build process (compiling and linking) has finished, and ther are results
  /// The compiler pointer is required in order to get the diagnostics. If there are errors
  /// and the messages dock widget is hidden, it is made visible and the tools output tab is
  /// made active. If there are not errors, the tools output tab is just cleared.
  void playerSolutionBuilt(Compiler *compiler);

signals:
  /// Emitted when user selects one of the diagnostics in the tools output
  /// @param index The index of the selected diagnostic in the allDiagnostics list
  void diagnosticSelected(int index);


protected:
  /// Appends the given diagnostic to the tools output
  void appendDiagnostic(const Diagnostic* diagnostic);

protected slots:
  /// Called when user selects a diagnostic in the tools output list
  void toolsOutputRowChanged(int row);

};




#endif // RESULTSDOCKWIDGET_H

#include "ResultsDockWidget.h"
#include "StandardInputOutputInspector.h"
#include "PlayerSolution.h"
#include <iostream>
#include "ToolCall/Compiler/Diagnostic.h"
#include <QAction>
#include <QProcess>
#include <QDir>

ResultsDockWidget::ResultsDockWidget(QWidget* parent, Qt::WindowFlags flags)
    : QDockWidget(tr("Results"), parent, flags)
    //, compiler(nullptr)
{
    setFeatures(QDockWidget::DockWidgetMovable);
//	// QMainWindow requires all its direct children have a name to store preferences
    setObjectName("ResultsDockWidget");

//	// Each message control is placed within a tab control
    resultsTabWidget = new QTabWidget(this);
    setWidget(resultsTabWidget);

//	// Add the first tab (page): the unit problem description
//    compilerOutputTab = new QTextEdit();
//    compilerOutputTab->setReadOnly(true);
//	unitDescription->document()->setDefaultFont(BotNeumannApp::getRobotFont());
//	unitDescription->document()->setDefaultStyleSheet("pre { margin-left: 1em; background: #ddd; }");
//	QIcon unitDescriptionIcon(":/button_information.svg");
//   resultsTabWidget->addTab(compilerOutputTab, tr("Compiler Output"));


    // Add the second tab: output generated by build and debug tools
    toolsOutput = new QListWidget();
    //toolsOutput->setFont( BotNeumannApp::getMonospacedFont() );
    toolsOutput->setWordWrap(true);
    toolsOutput->setTextElideMode(Qt::ElideNone); // Avoid ellipsis for large texts
    //connect(toolsOutput, SIGNAL(currentRowChanged(int)), this, SLOT(toolsOutputRowChanged(int)));
    toolsOutput->setStyleSheet("QListWidget::item { border-bottom: 1px dashed gray; }");
    QIcon toolsOutputIcon(":/unit_playing/buttons/info.svg");
    resultsTabWidget->addTab(toolsOutput, toolsOutputIcon, tr("Compile output"));
    //connect(toolsOutput, &QAction::triggered, this, &ResultsDockWidget::hightLight  )
//	// Some messages received by the LogManager may be shown in the GUI
//	LogManager::setMessagesArea(this);



//	// Add a third tab: for player's solution input/output
//	standardInputOutputInspector = new StandardInputOutputInspector();
//	QIcon inputOutputIcon(":/unit_playing/buttons/input_output.svg");
//	messagesTabWidget->addTab(standardInputOutputInspector, inputOutputIcon, tr("Input/output"));
}

void ResultsDockWidget::createTestCasesTabs(int testCasesCount
											, const QList<QFile *> &testCaseInputs
											, const QList<QFile *> &testCaseOutputs
											, const QList<QFile *> &testProgramOutputs
											, const QList<bool> testCaseState
											, const QFileInfoList &outputInfoList
											, const QFileInfoList &programOutputInfoList
											, const QDir workingDirectory )
{
//	std::cerr << "Voy a entrar " << testCasesCount;
     for (int index = 0; index <outputInfoList.size(); ++ index)
     {
         standardInputOutputInspector = new StandardInputOutputInspector();
         QIcon* toolsOutputIcon;
         if (testCaseState.at(index))
             toolsOutputIcon = new QIcon(":/unit_playing/buttons/accept.svg");
         else
		 {
             toolsOutputIcon = new QIcon(":/unit_playing/buttons/error.svg");
			 generateDiffFile( outputInfoList, programOutputInfoList, workingDirectory , index);
		 }
         resultsTabWidget->addTab(standardInputOutputInspector, *toolsOutputIcon, QString::number(index + 1));
         standardInputOutputInspector->setInput(testCaseInputs.at(index));
         standardInputOutputInspector->setOutput(testCaseOutputs.at(index));
		 standardInputOutputInspector->setProgramOutput(testProgramOutputs.at(index));

     }
}

void ResultsDockWidget::generateDiffFile(  const QFileInfoList &outputInfoList
										 , const QFileInfoList &programOutputInfoList
										 , const QDir workingDirectory
										 , int index )
{
     this->workingDirectoryPath = workingDirectory.absolutePath();
	 QString diffCall = "diff";
	 QStringList arguments;
     QProcess* diffProcess = new QProcess(this);
     diffProcess->setProgram("diff");

     QString outputFileDiffPath;

     outputFileDiffPath.sprintf("%s%c%s%03d%s", workingDirectory.absolutePath().toStdString().c_str()
								, QDir::separator().toLatin1() , "p_output" , index+1 , ".diff");

     diffProcess->setReadChannelMode(QProcess::SeparateChannels);
     diffProcess->setStandardOutputFile( outputFileDiffPath );
	 arguments <<  "-w" <<  "-U 1000" << outputInfoList.at(index).absoluteFilePath()
               << programOutputInfoList.at(index).absoluteFilePath();
     diffProcess->setArguments(arguments);
     //connect(diffProcess, &QProcess::finished, this, &ResultsDockWidget::callDiff2Html);
     connect(diffProcess, SIGNAL(finished(int,QProcess::ExitStatus)), this, SLOT(callDiff2Html()));
     diffProcess->start(diffCall, arguments);

}

void ResultsDockWidget::callDiff2Html()
{
    int index = 2;
    //std::cerr << "ENTRE" << this->workingDirectoryPath.toStdString();
    QString outputFileDiffPathT;

    outputFileDiffPathT.sprintf("%s%c%s%03d%s", this->workingDirectoryPath.toStdString().c_str()
                               , QDir::separator().toLatin1() , "p_output" , index+1 , ".diff");
    QString outputFileHtmlPath;

    outputFileHtmlPath.sprintf("%s%c%s%03d%s", this->workingDirectoryPath.toStdString().c_str()
                               , QDir::separator().toLatin1() , "p_output" , index+1 , ".html");

    QString diff2HtmlCall = "diff2html";
	QStringList arguments;
    QProcess* diff2HtmlProcess = new QProcess(this);


    diff2HtmlProcess->setReadChannelMode(QProcess::SeparateChannels);

    arguments << "--su" << "hidden" << "-i" <<  "file" << "-F" << outputFileHtmlPath <<"--" << outputFileDiffPathT;

    diff2HtmlProcess->start(diff2HtmlCall, arguments);
}



void ResultsDockWidget::appendDiagnostic(const Diagnostic* diagnostic)
{
    Q_ASSERT(diagnostic);
    // Create a list item with icon according to the severity of the diagnostic.
    // The text may be multiline. The constructor adds the item to the list widget automatically
    QIcon icon( diagnostic->getSeverityIcon() );
    QListWidgetItem* listItem = new QListWidgetItem(icon, diagnostic->buildUserText(), toolsOutput);

    // Provide some styles
    listItem->setForeground( diagnostic->getSeverityColor() );

  //  static size_t messageCount = 0;
    this->toolsOutput->addItem(diagnostic->buildUserText());
    // qCInfo(logBuild, "/%zu/[%s]", ++messageCount, qPrintable(diagnostic->buildUserText()) );
}


void ResultsDockWidget::clear()
{
    // A new build process has started. Output from previous compiler calls are outdated, clear them
    //Q_UNUSED(compiler);
    //this->compiler = nullptr;
    toolsOutput->clear();
}

void ResultsDockWidget::appendDebuggerMessage(QtMsgType type, const QString& category, const QString& message)
{
    QColor color = Qt::black;
    QIcon icon;

    if ( category == "ADbR" )
    {
        color = Qt::black;
        icon.addFile(":/unit_playing/buttons/monitor.svg");
    }
    else if ( category == "ADbC")
    {
        color = Qt::darkGreen;
        icon.addFile(":/unit_playing/buttons/info.svg");
    }
    else
    {
        switch ( type )
        {
            case QtWarningMsg: color = Qt::magenta; icon.addFile(":/unit_playing/buttons/warning.svg"); break;
            case QtFatalMsg:
            case QtCriticalMsg: color = Qt::red; icon.addFile(":/unit_playing/buttons/error.svg"); break;
            case QtDebugMsg: color = Qt::darkGray; icon.addFile(":/unit_playing/buttons/link_broken.svg"); break;
            default: icon.addFile(":/unit_playing/buttons/info.svg"); break;
        }
    }

    QListWidgetItem* listItem = new QListWidgetItem(icon, message, toolsOutput);

    // Provide some styles
    listItem->setForeground( color );
}
